{"version":3,"file":"component---src-pages-index-tsx-7955de4df2abc6ab0d65.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/pagination.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\ntype PaginationProps = {\r\n  maxPage: number\r\n  current: number\r\n  type?: string\r\n}\r\nconst Pagination = ({ maxPage, current, type = \"\" }: PaginationProps) => {\r\n  let first\r\n  let prev\r\n  let next\r\n  let last\r\n\r\n  if (current === 1) {\r\n    first = (\r\n      <li className=\"not-work\" key=\"pagination0\">\r\n        <span>最新</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    first = (\r\n      <li key=\"pagination0\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>最新</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === 1) {\r\n    prev = (\r\n      <li className=\"not-work\" key=\"pagination1\">\r\n        <span>前へ</span>\r\n      </li>\r\n    )\r\n  } else if (current === 2) {\r\n    prev = (\r\n      <li key=\"pagination1\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>前へ</Link>\r\n      </li>\r\n    )\r\n  } else {\r\n    prev = (\r\n      <li key=\"pagination1\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current - 1}/`}>前へ</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === maxPage) {\r\n    next = (\r\n      <li className=\"not-work\" key=\"pagination3\">\r\n        <span>次へ</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    next = (\r\n      <li key=\"pagination3\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current + 1}/`}>次へ</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === maxPage) {\r\n    last = (\r\n      <li className=\"not-work\" key=\"paginatio4\">\r\n        <span>最後</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    last = (\r\n      <li key=\"pagination4\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${maxPage}/`}>最後</Link>\r\n      </li>\r\n    )\r\n  }\r\n  if (maxPage > 1) {\r\n    return (\r\n      <PaginationWrapper>\r\n        <ul>\r\n          {first}\r\n          {prev}\r\n          <li key=\"pagination2\">\r\n            page {current}/{maxPage}\r\n          </li>\r\n          {next}\r\n          {last}\r\n        </ul>\r\n      </PaginationWrapper>\r\n    )\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\nexport default Pagination\r\n\r\nconst PaginationWrapper = styled.nav`\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    justify-content: center;\r\n\r\n    li {\r\n      padding: 0 10px;\r\n\r\n      &.not-work span {\r\n        text-decoration: none;\r\n        background: var(--orange);\r\n        color: #fff;\r\n        opacity: 0.5;\r\n      }\r\n\r\n      span, a {\r\n        text-decoration: underline;\r\n        display: flex;\r\n        align-items: center;\r\n        font-weight: 700;\r\n        color: var(--orange);\r\n        border-radius: 5px;\r\n        border: 1px solid var(--orange);\r\n        padding: 0 10px;\r\n      }\r\n    }\r\n  }\r\n`","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport config from \"../../gatsby-config\"\r\n\r\ntype SeoProps = {\r\n  title: string\r\n  description?: string\r\n  location: Location\r\n  imagePath?: string\r\n  post?: CommonPost\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst Seo = ({ title, description, location, imagePath, post, children }: SeoProps) => {\r\n  const { siteMetadata }  = config as { siteMetadata: SiteMetadata }\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const fullTitle = (isRootPath ? siteMetadata.title : `${title} | ${siteMetadata.title}`)\r\n  const canonicalUrl = siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\r\n  const imageUrl = `${siteMetadata.siteUrl}${imagePath ? imagePath : \"/favicon.webp\"}`\r\n\r\n  function createJsonLd() {\r\n    // JSON-LDの設定\r\n    const author = [\r\n      {\r\n        \"@type\": \"Person\",\r\n        name: siteMetadata.author.name,\r\n        description: siteMetadata.author.summary,\r\n        url: siteMetadata.siteUrl,\r\n        sameAs: [\r\n          siteMetadata.social.twitter,\r\n          siteMetadata.social.github\r\n        ]\r\n      }\r\n    ]\r\n\r\n    const publisher = {\r\n      \"@type\": \"Organization\",\r\n      name: siteMetadata.title,\r\n      description: siteMetadata.description,\r\n      logo: {\r\n        \"@type\": \"ImageObject\",\r\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\r\n        width: 512,\r\n        height: 512\r\n      }\r\n    }\r\n\r\n    let jsonLd = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\r\n        inLanguage: \"ja\",\r\n        url: canonicalUrl,\r\n        name: title,\r\n        author,\r\n        publisher,\r\n        image: imageUrl,\r\n        description: metaDescription\r\n      }\r\n    ]\r\n    if (post) {\r\n      const article = {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"BlogPosting\",\r\n        url: canonicalUrl,\r\n        name: post.title,\r\n        headline: post.title,\r\n        image: {\r\n          \"@type\": \"ImageObject\",\r\n          url: imageUrl,\r\n        },\r\n        description: post.description,\r\n        datePublished: post.date,\r\n        dateModified: post.date, // FIXME\r\n        mainEntityOfPage: {\r\n          \"@type\": \"WebPage\",\r\n          \"@id\": canonicalUrl\r\n        },\r\n        author,\r\n        publisher\r\n      }\r\n      // @ts-ignore\r\n      jsonLd = [...jsonLd, article]\r\n    }\r\n    return JSON.stringify(jsonLd)\r\n  }\r\n\r\n  let jsonLd = createJsonLd()\r\n\r\n  return (\r\n    <>\r\n      <html lang=\"ja\" />\r\n      <title>{fullTitle}</title>\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n      <script type=\"application/ld+json\">{jsonLd}</script>\r\n\r\n      <meta name=\"description\" content={metaDescription} />\r\n      {imagePath && (\r\n        <>\r\n          <meta property=\"og:image\" content={imageUrl} />\r\n          <meta property=\"og:url\" content={imageUrl} />\r\n          <meta property=\"twitter:image\" content={imageUrl} />\r\n        </>\r\n      )}\r\n      <meta property=\"og:title\" content={fullTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content={`${isRootPath ? \"website\" : \"webpage\"}`} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\r\n      <meta name=\"twitter:title\" content={fullTitle} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport { convertCategory, mergePosts } from \"../utilFunction\"\r\nimport { ContentsOrderedListWrapper } from \"../style\"\r\nimport Pagination from \"../components/pagination\"\r\n\r\ntype BlogIndexProps = {\r\n  data: {\r\n    allMdx: AllMdx\r\n    allWpPost: AllWpPost\r\n    allFile: AllFile\r\n  }\r\n  location: Location\r\n}\r\n\r\nconst BlogIndex = ({ data, location }: BlogIndexProps) => {\r\n\r\n  const posts = mergePosts(data.allMdx, data.allWpPost, data.allFile)\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location}>\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  const POST_PER_PAGE = 12\r\n  const maxPage = Math.ceil(posts.length / POST_PER_PAGE)\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <ContentsOrderedListWrapper>\r\n        {posts.slice(0, POST_PER_PAGE).map(post => {\r\n          return (\r\n            <li key={post.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemType=\"https://schema.org/Article\"\r\n              >\r\n                <Link to={`/${convertCategory(post.category)}/${post.slug}`} itemProp=\"url\">\r\n                  <h2>\r\n                    <span itemProp=\"headline\">{post.title}</span>\r\n                  </h2>\r\n                  <section>\r\n                    <div style={{ textAlign: \"right\" }}><small>\r\n                      <time>{post.date}</time>\r\n                    </small></div>\r\n                    <div className=\"thumbnail\">\r\n                      {typeof post.gatsbyImage === \"undefined\" ||\r\n                        <GatsbyImage alt={post.altText} image={post.gatsbyImage} />\r\n                      }\r\n                    </div>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{\r\n                        __html: post.excerpt\r\n                      }}\r\n                      itemProp=\"description\"\r\n                    />\r\n                  </section>\r\n                </Link>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ContentsOrderedListWrapper>\r\n      <Pagination maxPage={maxPage} current={1}/>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\n/**\r\n * Head export to define metadata for the page\r\n *\r\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\r\n */\r\nexport const Head = ({ location }: BlogIndexProps) => <Seo title=\"\" location={location}/>\r\n\r\nexport const pageQuery = graphql`\r\n  {\r\n    allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMdx(sort: { frontmatter: { date: DESC } }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"YYYY/MM/DD\")\r\n          description\r\n          featuredImagePath\r\n          category\r\n        }\r\n      }\r\n    }\r\n    allWpPost(sort: { date: DESC }) {\r\n      nodes {\r\n        title\r\n        excerpt\r\n        slug\r\n        date(formatString: \"YYYY/MM/DD\")\r\n        featuredImage{\r\n          node{\r\n            altText\r\n            gatsbyImage(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n        categories {\r\n          nodes {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["_ref","first","prev","next","last","maxPage","current","type","React","className","key","Link","to","PaginationWrapper","styled","nav","_templateObject","_taggedTemplateLiteralLoose","title","description","location","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","datePublished","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","content","property","data","posts","mergePosts","allMdx","allWpPost","allFile","length","Layout","Math","ceil","ContentsOrderedListWrapper","slice","map","slug","itemType","convertCategory","category","itemProp","style","textAlign","gatsbyImage","GatsbyImage","alt","altText","dangerouslySetInnerHTML","__html","excerpt","Pagination","Head","_ref2","Seo"],"sourceRoot":""}
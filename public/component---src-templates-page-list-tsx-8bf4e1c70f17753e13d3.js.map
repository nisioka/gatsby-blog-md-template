{"version":3,"file":"component---src-templates-page-list-tsx-8bf4e1c70f17753e13d3.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/pagination.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/style.tsx","webpack://gatsby-starter-blog/./src/templates/page-list.tsx"],"sourcesContent":["import { Link } from \"gatsby\"\r\nimport React from \"react\"\r\nimport styled from \"styled-components\"\r\n\r\ntype PaginationProps = {\r\n  maxPage: number\r\n  current: number\r\n  type?: string\r\n}\r\nconst Pagination = ({ maxPage, current, type = \"\" }: PaginationProps) => {\r\n  let first\r\n  let prev\r\n  let next\r\n  let last\r\n\r\n  if (current === 1) {\r\n    first = (\r\n      <li className=\"not-work\" key=\"pagination0\">\r\n        <span>最新</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    first = (\r\n      <li key=\"pagination0\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>最新</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === 1) {\r\n    prev = (\r\n      <li className=\"not-work\" key=\"pagination1\">\r\n        <span>前へ</span>\r\n      </li>\r\n    )\r\n  } else if (current === 2) {\r\n    prev = (\r\n      <li key=\"pagination1\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}`}>前へ</Link>\r\n      </li>\r\n    )\r\n  } else {\r\n    prev = (\r\n      <li key=\"pagination1\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current - 1}/`}>前へ</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === maxPage) {\r\n    next = (\r\n      <li className=\"not-work\" key=\"pagination3\">\r\n        <span>次へ</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    next = (\r\n      <li key=\"pagination3\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${current + 1}/`}>次へ</Link>\r\n      </li>\r\n    )\r\n  }\r\n\r\n  if (current === maxPage) {\r\n    last = (\r\n      <li className=\"not-work\" key=\"paginatio4\">\r\n        <span>最後</span>\r\n      </li>\r\n    )\r\n  } else {\r\n    last = (\r\n      <li key=\"pagination4\">\r\n        <Link to={`/${type}${type ? \"/\" : \"\"}page/${maxPage}/`}>最後</Link>\r\n      </li>\r\n    )\r\n  }\r\n  if (maxPage > 1) {\r\n    return (\r\n      <PaginationWrapper>\r\n        <ul>\r\n          {first}\r\n          {prev}\r\n          <li key=\"pagination2\">\r\n            page {current}/{maxPage}\r\n          </li>\r\n          {next}\r\n          {last}\r\n        </ul>\r\n      </PaginationWrapper>\r\n    )\r\n  } else {\r\n    return <></>\r\n  }\r\n}\r\n\r\nexport default Pagination\r\n\r\nconst PaginationWrapper = styled.nav`\r\n  ul {\r\n    display: flex;\r\n    list-style: none;\r\n    justify-content: center;\r\n\r\n    li {\r\n      padding: 0 10px;\r\n\r\n      &.not-work span {\r\n        text-decoration: none;\r\n        background: var(--orange);\r\n        color: #fff;\r\n        opacity: 0.5;\r\n      }\r\n\r\n      span, a {\r\n        text-decoration: underline;\r\n        display: flex;\r\n        align-items: center;\r\n        font-weight: 700;\r\n        color: var(--orange);\r\n        border-radius: 5px;\r\n        border: 1px solid var(--orange);\r\n        padding: 0 10px;\r\n      }\r\n    }\r\n  }\r\n`","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport config from \"../../gatsby-config\"\r\n\r\ntype SeoProps = {\r\n  title: string\r\n  description?: string\r\n  location: Location\r\n  imagePath?: string\r\n  post?: CommonPost\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst Seo = ({ title, description, location, imagePath, post, children }: SeoProps) => {\r\n  const { siteMetadata }  = config as { siteMetadata: SiteMetadata }\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const fullTitle = (isRootPath ? siteMetadata.title : `${title} | ${siteMetadata.title}`)\r\n  const canonicalUrl = siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\r\n  const imageUrl = `${siteMetadata.siteUrl}${imagePath ? imagePath : \"/favicon.webp\"}`\r\n\r\n  function createJsonLd() {\r\n    // JSON-LDの設定\r\n    const author = [\r\n      {\r\n        \"@type\": \"Person\",\r\n        name: siteMetadata.author.name,\r\n        description: siteMetadata.author.summary,\r\n        url: siteMetadata.siteUrl,\r\n        sameAs: [\r\n          siteMetadata.social.twitter,\r\n          siteMetadata.social.github\r\n        ]\r\n      }\r\n    ]\r\n\r\n    const publisher = {\r\n      \"@type\": \"Organization\",\r\n      name: siteMetadata.title,\r\n      description: siteMetadata.description,\r\n      logo: {\r\n        \"@type\": \"ImageObject\",\r\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\r\n        width: 512,\r\n        height: 512\r\n      }\r\n    }\r\n\r\n    let jsonLd = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\r\n        inLanguage: \"ja\",\r\n        url: canonicalUrl,\r\n        name: title,\r\n        author: author,\r\n        publisher: publisher,\r\n        image: imageUrl,\r\n        description: metaDescription\r\n      }\r\n    ]\r\n    if (post) {\r\n      const article = {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"BlogPosting\",\r\n        url: canonicalUrl,\r\n        name: post.title,\r\n        headline: post.title,\r\n        image: {\r\n          \"@type\": \"ImageObject\",\r\n          url: imageUrl,\r\n        },\r\n        description: post.excerpt,\r\n        datePublished: new Date(post.date),\r\n        dateModified: new Date(post.dateModified),\r\n        mainEntityOfPage: {\r\n          \"@type\": \"WebPage\",\r\n          \"@id\": canonicalUrl\r\n        },\r\n        author: author,\r\n        publisher: publisher\r\n      }\r\n      // @ts-ignore\r\n      jsonLd = [...jsonLd, article]\r\n    }\r\n    return JSON.stringify(jsonLd)\r\n  }\r\n\r\n  let jsonLd = createJsonLd()\r\n\r\n  return (\r\n    <>\r\n      <html lang=\"ja\" />\r\n      <title>{fullTitle}</title>\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n      <script type=\"application/ld+json\">{jsonLd}</script>\r\n\r\n      <meta name=\"description\" content={metaDescription} />\r\n      {imagePath && (\r\n        <>\r\n          <meta property=\"og:image\" content={imageUrl} />\r\n          <meta property=\"og:url\" content={imageUrl} />\r\n          <meta property=\"twitter:image\" content={imageUrl} />\r\n        </>\r\n      )}\r\n      <meta property=\"og:title\" content={fullTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content={`${isRootPath ? \"website\" : \"webpage\"}`} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\r\n      <meta name=\"twitter:title\" content={fullTitle} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import styled from \"styled-components\"\r\n\r\nexport const ContentsListHeader = styled.header`\r\n  text-align: center;\r\n\r\n  h1, h2 {\r\n    &:after {\r\n      margin: 0 auto;\r\n      content: '';\r\n      display: block;\r\n      width: 98%;\r\n      height: 3px;\r\n      background: var(--orange);\r\n    }\r\n  }\r\n`\r\n\r\nexport const ContentsOrderedListWrapper = styled.ol`\r\n  column-count: 1;\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0 -15px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: var(--maxWidth-full);\r\n\r\n  li {\r\n    padding: 5px;\r\n    margin: var(--spacing-1) ;\r\n    box-sizing: border-box;\r\n    border: 1px solid var(--black);\r\n    border-radius: 5px;\r\n    background-color: #fff;\r\n\r\n    a {\r\n      color: var(--black);\r\n      text-decoration: none;\r\n    }\r\n\r\n    h2 {\r\n      font-size: var(--fontSize-2);\r\n    }\r\n  }\r\n  .thumbnail {\r\n    float: left;\r\n  }\r\n\r\n  @media screen and (min-width: calc(512px + 160px)) {\r\n    column-count: 2;\r\n\r\n    li {\r\n      padding: 15px;\r\n      width: 48%;\r\n\r\n      h2 {\r\n        font-size: var(--fontSize-3);\r\n      }\r\n\r\n      a {\r\n        &:hover h2 {\r\n          text-decoration: underline;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  @media screen and (min-width: calc(768px + 330px)) {\r\n    column-count: 3;\r\n\r\n    li {\r\n      width: 32%;\r\n    }\r\n  }\r\n`\r\n\r\n\r\nexport const NormalAreaWrapper = styled.div`\r\n  background-color: #fff;\r\n`","import * as React from \"react\"\r\n\r\nimport { graphql, Link } from \"gatsby\"\r\nimport { PageContext } from \"gatsby/internal\"\r\nimport { convertCategory, mergePosts } from \"../utilFunction\"\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport { ContentsListHeader, ContentsOrderedListWrapper } from \"../style\"\r\nimport Pagination from \"../components/pagination\"\r\n\r\nconst PageList = ({ pageContext, data, location }: {pageContext: PageContext, data: any, location: Location}) => {\r\n  const posts = mergePosts(data.allMdx, data.allWpPost, data.allFile)\r\n  const title = `記事一覧`\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <ContentsListHeader>\r\n        <h1>{title}</h1>\r\n        {/*<p>{posts} 記事あります</p>*/}\r\n      </ContentsListHeader>\r\n      <ContentsOrderedListWrapper>\r\n        {posts.map(post => {\r\n          return (\r\n            <li key={post.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemType=\"http://schema.org/Article\"\r\n              >\r\n                <Link to={`/${convertCategory(post.category)}/${post.slug}`}>\r\n                  <h2>\r\n                    <span>{post.title}</span>\r\n                  </h2>\r\n                  <section>\r\n                    <div><small>\r\n                      <time>{post.date}</time>\r\n                    </small></div>\r\n                    <div className=\"thumbnail\">\r\n                      {typeof post.gatsbyImage === \"undefined\" ||\r\n                        <GatsbyImage alt={post.altText} image={post.gatsbyImage} className=\"thumbnail\" />\r\n                      }\r\n                    </div>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: post.excerpt }}\r\n                    />\r\n                  </section>\r\n                </Link>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ContentsOrderedListWrapper>\r\n      <Pagination maxPage={pageContext.maxPage} current={pageContext.current} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default PageList\r\n\r\nexport const Head = ({ location }: {location: Location}) => {\r\n\r\n  return (\r\n    <Seo\r\n      title={`記事一覧`}\r\n      location={location}\r\n    />\r\n  )\r\n}\r\n\r\nexport const pageQuery = graphql`\r\n  query( $limit: Int!, $skip: Int!) {\r\n    allMdx(\r\n      limit: $limit\r\n      skip: $skip\r\n      sort: { frontmatter: { date: DESC } }\r\n    ) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"YYYY/MM/DD\")\r\n          description\r\n          featuredImagePath\r\n          category\r\n        }\r\n      }\r\n    }\r\n    allWpPost(\r\n      limit: $limit\r\n      skip: $skip\r\n      sort: { date: DESC }\r\n    ) {\r\n      nodes {\r\n        title\r\n        excerpt\r\n        slug\r\n        date(formatString: \"YYYY/MM/DD\")\r\n        featuredImage{\r\n          node{\r\n            altText\r\n            gatsbyImage(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n        categories {\r\n          nodes {\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["_ref","first","prev","next","last","maxPage","current","type","React","className","key","Link","to","PaginationWrapper","styled","nav","_templateObject","_taggedTemplateLiteralLoose","title","description","location","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","excerpt","datePublished","Date","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","content","property","ContentsListHeader","header","ContentsOrderedListWrapper","ol","_templateObject2","div","_templateObject3","pageContext","data","posts","mergePosts","allMdx","allWpPost","allFile","Layout","map","slug","itemType","convertCategory","category","gatsbyImage","GatsbyImage","alt","altText","dangerouslySetInnerHTML","__html","Pagination","Head","_ref2","Seo"],"sourceRoot":""}
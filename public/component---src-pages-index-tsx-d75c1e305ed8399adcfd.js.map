{"version":3,"file":"component---src-pages-index-tsx-d75c1e305ed8399adcfd.js","mappings":"+NAiJA,UA9FkBA,IAAwC,IAAvC,KAAEC,EAAI,SAAEC,GAA0BF,EAC/CG,EAAyD,CAAC,EAC9DF,EAAKG,QAAQC,MAAMC,SAAQC,IACzBJ,EAAkBI,EAAKA,KAAKC,cAAgBD,EAAKA,KAAKE,gBAAgBC,eAAe,IAYvF,MAAMC,EAAWV,EAAKW,OAAOC,MACvBC,EAAUb,EAAKc,UAAUF,MACzBG,EAAQL,EAASM,KAAIC,IACP,CAChBC,MAAOD,EAAKE,YAAYD,MACxBE,QAASH,EAAKG,QACdC,KAAMJ,EAAKK,OAAOD,KAClBE,KAAMN,EAAKE,YAAYI,KACvBC,YAAaP,EAAKE,YAAYK,YAC9BC,QAASR,EAAKE,YAAYO,kBAC1BC,aAAaC,EAAAA,EAAAA,GAAS1B,EAAkBe,EAAKE,YAAYO,mBAAqB,sCAG/EG,OAAOhB,EAAQG,KAAIC,IAAQ,IAAAa,EAAAC,EAC5B,MAAO,CACLb,MAAOD,EAAKC,MACZE,QAASH,EAAKG,QACdC,KAAMJ,EAAKI,KACXE,KAAMN,EAAKM,KACXE,SAA2B,QAAlBK,EAAAb,EAAKe,qBAAa,IAAAF,OAAA,EAAlBA,EAAoBxB,KAAKmB,UAAW,GAC7CE,aAA+B,QAAlBI,EAAAd,EAAKe,qBAAa,IAAAD,OAAA,EAAlBA,EAAoBzB,KAAKqB,eAAeC,EAAAA,EAAAA,GAAS1B,EAAkB,kCACjF,KAGH,OAAqB,IAAjBa,EAAMkB,OAENC,EAAAA,cAACC,EAAAA,EAAM,CAAClC,SAAUA,GAChBiC,EAAAA,cAAA,SAAG,8JAUPA,EAAAA,cAACC,EAAAA,EAAM,CAAClC,SAAUA,GAChBiC,EAAAA,cAAA,MAAIE,MAAO,CAAEC,UAAW,SACrBtB,EAAMC,KAAIC,IACT,MAAMC,EAAQD,EAAKC,OAASD,EAAKI,KAEjC,OACEa,EAAAA,cAAA,MAAII,IAAKrB,EAAKI,MACZa,EAAAA,cAAA,WACEK,UAAU,iBACVC,WAAS,EACTC,SAAS,8BAETP,EAAAA,cAAA,cACEA,EAAAA,cAAA,UACEA,EAAAA,cAACQ,EAAAA,KAAI,CAACC,GAAI1B,EAAKI,KAAMuB,SAAS,OAC5BV,EAAAA,cAAA,QAAMU,SAAS,YAAY1B,KAG/BgB,EAAAA,cAAA,OAAKE,MAAO,CAAES,UAAW,UAAWX,EAAAA,cAAA,aAClCA,EAAAA,cAAA,YAAOjB,EAAKM,SAGhBW,EAAAA,cAAA,oBAC+B,IAArBjB,EAAKU,aACXO,EAAAA,cAACY,EAAAA,EAAW,CAACC,IAAK9B,EAAKQ,QAASuB,MAAO/B,EAAKU,cAE9CO,EAAAA,cAAA,KACEe,wBAAyB,CACvBC,OAAQjC,EAAKO,aAAeP,EAAKG,SAEnCwB,SAAS,kBAIZ,KAIJ,EAWN,MAAMO,EAAOA,IAAMjB,EAAAA,cAACkB,EAAAA,EAAG,CAAClC,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/pages/index.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\"\r\n\r\ntype BlogIndexProps = {\r\n  data: {\r\n    allFile: {\r\n      edges: {\r\n        node: {\r\n          relativePath: string\r\n          childImageSharp: {\r\n            gatsbyImageData: any\r\n          }\r\n        }\r\n      }[]\r\n    }\r\n    allMdx: {\r\n      nodes: {\r\n        excerpt: string\r\n        fields: {\r\n          slug: string\r\n        }\r\n        frontmatter: {\r\n          title: string\r\n          date: string\r\n          description: string\r\n          featuredImagePath: string\r\n        }\r\n      }[]\r\n    }\r\n    allWpPost: {\r\n      nodes: {\r\n        title: string\r\n        excerpt: string\r\n        slug: string\r\n        date: string\r\n        featuredImage: {\r\n          node: {\r\n            altText: string\r\n            gatsbyImage: IGatsbyImageData | null\r\n          }\r\n        }\r\n      }[]\r\n    }\r\n  }\r\n  location: Location\r\n}\r\n\r\nconst BlogIndex = ({ data, location }: BlogIndexProps) => {\r\n  let allFeaturedImages: { [key: string]: IGatsbyImageData } = {}\r\n  data.allFile.edges.forEach(node => {\r\n    allFeaturedImages[node.node.relativePath] = node.node.childImageSharp.gatsbyImageData\r\n  })\r\n\r\n  type Post = {\r\n    title: string\r\n    excerpt: string\r\n    slug: string\r\n    date: string\r\n    description?: string\r\n    altText: string\r\n    gatsbyImage: IGatsbyImageData | undefined\r\n  }\r\n  const mdxPosts = data.allMdx.nodes\r\n  const wpPosts = data.allWpPost.nodes\r\n  const posts = mdxPosts.map(post => {\r\n    const mdx: Post = {\r\n      title: post.frontmatter.title,\r\n      excerpt: post.excerpt,\r\n      slug: post.fields.slug,\r\n      date: post.frontmatter.date,\r\n      description: post.frontmatter.description,\r\n      altText: post.frontmatter.featuredImagePath,\r\n      gatsbyImage: getImage(allFeaturedImages[post.frontmatter.featuredImagePath || \"featured/defaultThumbnail.png\"]),\r\n    }\r\n    return mdx\r\n  }).concat(wpPosts.map(post => {\r\n    return {\r\n      title: post.title,\r\n      excerpt: post.excerpt,\r\n      slug: post.slug,\r\n      date: post.date,\r\n      altText: post.featuredImage?.node.altText || \"\",\r\n      gatsbyImage: post.featuredImage?.node.gatsbyImage || getImage(allFeaturedImages[\"featured/defaultThumbnail.png\"]),\r\n    }\r\n  }));\r\n\r\n  if (posts.length === 0) {\r\n    return (\r\n      <Layout location={location}>\r\n        <p>\r\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\r\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\r\n          gatsby-config.js).\r\n        </p>\r\n      </Layout>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <ol style={{ listStyle: `none` }}>\r\n        {posts.map(post => {\r\n          const title = post.title || post.slug\r\n\r\n          return (\r\n            <li key={post.slug}>\r\n              <article\r\n                className=\"post-list-item\"\r\n                itemScope\r\n                itemType=\"https://schema.org/Article\"\r\n              >\r\n                <header>\r\n                  <h2>\r\n                    <Link to={post.slug} itemProp=\"url\">\r\n                      <span itemProp=\"headline\">{title}</span>\r\n                    </Link>\r\n                  </h2>\r\n                  <div style={{ textAlign: \"right\" }}><small>\r\n                    <time>{post.date}</time>\r\n                  </small></div>\r\n                </header>\r\n                <section>\r\n                  {typeof post.gatsbyImage === \"undefined\" ||\r\n                    <GatsbyImage alt={post.altText} image={post.gatsbyImage} />\r\n                  }\r\n                  <p\r\n                    dangerouslySetInnerHTML={{\r\n                      __html: post.description || post.excerpt,\r\n                    }}\r\n                    itemProp=\"description\"\r\n                  />\r\n                </section>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ol>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\n/**\r\n * Head export to define metadata for the page\r\n *\r\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\r\n */\r\nexport const Head = () => <Seo title=\"All posts\" />\r\n\r\nexport const pageQuery = graphql`\r\n  {\r\n    allFile(\r\n      filter: {\r\n        sourceInstanceName: { eq: \"images\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          relativePath\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allMdx(sort: { frontmatter: { date: DESC } }) {\r\n      nodes {\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          title\r\n          date(formatString: \"YYYY/MM/DD\")\r\n          description\r\n          featuredImagePath\r\n        }\r\n      }\r\n    }\r\n    allWpPost(sort: { date: DESC }) {\r\n      nodes {\r\n        title\r\n        excerpt\r\n        slug\r\n        date(formatString: \"YYYY/MM/DD\")\r\n        featuredImage{\r\n          node{\r\n            altText\r\n            gatsbyImage(\r\n              width: 100,\r\n              height: 100\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["_ref","data","location","allFeaturedImages","allFile","edges","forEach","node","relativePath","childImageSharp","gatsbyImageData","mdxPosts","allMdx","nodes","wpPosts","allWpPost","posts","map","post","title","frontmatter","excerpt","slug","fields","date","description","altText","featuredImagePath","gatsbyImage","getImage","concat","_post$featuredImage","_post$featuredImage2","featuredImage","length","React","Layout","style","listStyle","key","className","itemScope","itemType","Link","to","itemProp","textAlign","GatsbyImage","alt","image","dangerouslySetInnerHTML","__html","Head","Seo"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-404-tsx-af62aa617870fa6d42a8.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/404.tsx"],"sourcesContent":["/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport config from \"../../gatsby-config\"\r\n\r\ntype SeoProps = {\r\n  title: string\r\n  description?: string\r\n  location: Location\r\n  imagePath?: string\r\n  post?: CommonPost\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst Seo = ({ title, description, location, imagePath, post, children }: SeoProps) => {\r\n  const { siteMetadata }  = config as { siteMetadata: SiteMetadata }\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const fullTitle = (isRootPath ? siteMetadata.title : `${title} | ${siteMetadata.title}`)\r\n  const canonicalUrl = siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\r\n  const imageUrl = `${siteMetadata.siteUrl}${imagePath ? imagePath : \"/favicon.webp\"}`\r\n\r\n  function createJsonLd() {\r\n    // JSON-LDの設定\r\n    const author = [\r\n      {\r\n        \"@type\": \"Person\",\r\n        name: siteMetadata.author.name,\r\n        description: siteMetadata.author.summary,\r\n        url: siteMetadata.siteUrl,\r\n        sameAs: [\r\n          siteMetadata.social.twitter,\r\n          siteMetadata.social.github\r\n        ]\r\n      }\r\n    ]\r\n\r\n    const publisher = {\r\n      \"@type\": \"Organization\",\r\n      name: siteMetadata.title,\r\n      description: siteMetadata.description,\r\n      logo: {\r\n        \"@type\": \"ImageObject\",\r\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\r\n        width: 512,\r\n        height: 512\r\n      }\r\n    }\r\n\r\n    let jsonLd = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\r\n        inLanguage: \"ja\",\r\n        url: canonicalUrl,\r\n        name: title,\r\n        author,\r\n        publisher,\r\n        image: imageUrl,\r\n        description: metaDescription\r\n      }\r\n    ]\r\n    if (post) {\r\n      const article = {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"BlogPosting\",\r\n        url: canonicalUrl,\r\n        name: post.title,\r\n        headline: post.title,\r\n        image: {\r\n          \"@type\": \"ImageObject\",\r\n          url: imageUrl,\r\n        },\r\n        description: post.description,\r\n        datePublished: post.date,\r\n        dateModified: post.date, // FIXME\r\n        mainEntityOfPage: {\r\n          \"@type\": \"WebPage\",\r\n          \"@id\": canonicalUrl\r\n        },\r\n        author,\r\n        publisher\r\n      }\r\n      // @ts-ignore\r\n      jsonLd = [...jsonLd, article]\r\n    }\r\n    return JSON.stringify(jsonLd)\r\n  }\r\n\r\n  let jsonLd = createJsonLd()\r\n\r\n  return (\r\n    <>\r\n      <html lang=\"ja\" />\r\n      <title>{fullTitle}</title>\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n      <script type=\"application/ld+json\">{jsonLd}</script>\r\n\r\n      <meta name=\"description\" content={metaDescription} />\r\n      {imagePath && (\r\n        <>\r\n          <meta property=\"og:image\" content={imageUrl} />\r\n          <meta property=\"og:url\" content={imageUrl} />\r\n          <meta property=\"twitter:image\" content={imageUrl} />\r\n        </>\r\n      )}\r\n      <meta property=\"og:title\" content={fullTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content={`${isRootPath ? \"website\" : \"webpage\"}`} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\r\n      <meta name=\"twitter:title\" content={fullTitle} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst NotFoundPage = ({ location }: { location: Location }) => {\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <h1>404: Not Found</h1>\r\n      <p>You just hit a route that doesn't exist... the sadness.</p>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = ({ location }: { location: Location }) => <Seo title=\"404: Not Found\" location={location}/>\r\n\r\nexport default NotFoundPage\r\n"],"names":["_ref","title","description","location","imagePath","post","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","image","article","headline","datePublished","date","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","React","lang","rel","href","type","content","property","Head","_ref2","Seo","Layout"],"sourceRoot":""}
{"version":3,"file":"component---src-templates-blog-post-tsx-79f930fcab567c4ce53f.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/related-list.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import * as React from \"react\"\r\nimport { Link, useStaticQuery, graphql } from \"gatsby\"\r\n\r\nimport { convertCategory, mergePosts } from \"../utilFunction\"\r\nimport { GatsbyImage } from \"gatsby-plugin-image\"\r\nimport { ContentsListHeader, ContentsOrderedListWrapper } from \"../style\"\r\n\r\ntype RelatedListProps = {\r\n  slug: string\r\n  category: string\r\n  tags: string[]\r\n}\r\nconst RelatedList = ({ slug, category, tags }: RelatedListProps) => {\r\n  const { allMdx, allWpPost, allFile }: {allMdx: AllMdx, allWpPost: AllWpPost, allFile: AllFile} = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        allMdx(\r\n          sort: { frontmatter: { date: DESC } }\r\n        ) {\r\n          nodes {\r\n            excerpt\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              title\r\n              date(formatString: \"YYYY/MM/DD\")\r\n              description\r\n              featuredImagePath\r\n              category\r\n              tags\r\n            }\r\n          }\r\n        }\r\n        allWpPost(\r\n          sort: { date: DESC }\r\n        ) {\r\n          nodes {\r\n            title\r\n            excerpt\r\n            slug\r\n            date(formatString: \"YYYY/MM/DD\")\r\n            featuredImage{\r\n              node{\r\n                altText\r\n                gatsbyImage(\r\n                  width: 100,\r\n                  height: 100\r\n                  formats: [AUTO, WEBP, AVIF]\r\n                  placeholder: BLURRED\r\n                )\r\n              }\r\n            }\r\n            categories {\r\n              nodes {\r\n                name\r\n              }\r\n            }\r\n            tags {\r\n              nodes {\r\n                name\r\n              }\r\n            }\r\n          }\r\n        }\r\n        allFile(\r\n          filter: {\r\n            sourceInstanceName: { eq: \"images\" }\r\n          }\r\n        ) {\r\n          edges {\r\n            node {\r\n              relativePath\r\n              childImageSharp {\r\n                gatsbyImageData(\r\n                  width: 100,\r\n                  height: 100\r\n                  formats: [AUTO, WEBP, AVIF]\r\n                  placeholder: BLURRED\r\n                )\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  // 関連度計算。\r\n  const posts = mergePosts(allMdx, allWpPost, allFile).map(post => {\r\n    let point = 0\r\n    if (post.slug !== slug) {\r\n      // カテゴリの一致出力\r\n      if (post.category === category) point++;\r\n      // タグの一致出力。記事のタグの中に一致するものがあればtrueを返す。\r\n      for (const tag of tags) {\r\n        if (post.tags.includes(tag)) point += 2;\r\n      }\r\n    }\r\n    return { post: post, relevance: point }\r\n  })\r\n  .filter(r => r.relevance >= 2)\r\n  .sort((a, b) => a.relevance = b.relevance ? (a.post.date < b.post.date ? 1 : -1) : b.relevance - a.relevance)\r\n  .slice(0, 6).map(r => r.post)\r\n\r\n  if (!posts) return <></>\r\n\r\n  return (\r\n    <>\r\n      <ContentsListHeader>\r\n        <h2>関連記事</h2>\r\n      </ContentsListHeader>\r\n      <ContentsOrderedListWrapper>\r\n        {posts.map((post, index) => {\r\n          return (\r\n            <li key={post.slug}>\r\n              <article>\r\n                <Link to={`/${convertCategory(post.category)}/${post.slug}`}>\r\n                  <h2>\r\n                    <span>{post.title}</span>\r\n                  </h2>\r\n                  <section>\r\n                    <div><small>\r\n                      <time>{post.date}</time>\r\n                    </small></div>\r\n                    <div className=\"thumbnail\">\r\n                      {typeof post.gatsbyImage === \"undefined\" ||\r\n                        <GatsbyImage alt={post.altText} image={post.gatsbyImage} className=\"thumbnail\" />\r\n                      }\r\n                    </div>\r\n                    <p\r\n                      dangerouslySetInnerHTML={{ __html: post.excerpt }}\r\n                    />\r\n                  </section>\r\n                </Link>\r\n              </article>\r\n            </li>\r\n          )\r\n        })}\r\n      </ContentsOrderedListWrapper>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RelatedList\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport config from \"../../gatsby-config\"\r\n\r\ntype SeoProps = {\r\n  title: string\r\n  description?: string\r\n  location: Location\r\n  imagePath?: string\r\n  post?: CommonPost\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst Seo = ({ title, description, location, imagePath, post, children }: SeoProps) => {\r\n  const { siteMetadata }  = config as { siteMetadata: SiteMetadata }\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n\r\n  const metaDescription = description || siteMetadata.description\r\n  const fullTitle = (isRootPath ? siteMetadata.title : `${title} | ${siteMetadata.title}`)\r\n  const canonicalUrl = siteMetadata.siteUrl + location.pathname.replace(/\\/page\\/([0-9])+\\//, \"\")\r\n  const imageUrl = `${siteMetadata.siteUrl}${imagePath ? imagePath : \"/favicon.webp\"}`\r\n\r\n  function createJsonLd() {\r\n    // JSON-LDの設定\r\n    const author = [\r\n      {\r\n        \"@type\": \"Person\",\r\n        name: siteMetadata.author.name,\r\n        description: siteMetadata.author.summary,\r\n        url: siteMetadata.siteUrl,\r\n        sameAs: [\r\n          siteMetadata.social.twitter,\r\n          siteMetadata.social.github\r\n        ]\r\n      }\r\n    ]\r\n\r\n    const publisher = {\r\n      \"@type\": \"Organization\",\r\n      name: siteMetadata.title,\r\n      description: siteMetadata.description,\r\n      logo: {\r\n        \"@type\": \"ImageObject\",\r\n        url: `${siteMetadata.siteUrl}/favicon.webp`,\r\n        width: 512,\r\n        height: 512\r\n      }\r\n    }\r\n\r\n    let jsonLd = [\r\n      {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": isRootPath ? \"webSite\" : \"webPage\",\r\n        inLanguage: \"ja\",\r\n        url: canonicalUrl,\r\n        name: title,\r\n        author,\r\n        publisher,\r\n        image: imageUrl,\r\n        description: metaDescription\r\n      }\r\n    ]\r\n    if (post) {\r\n      const article = {\r\n        \"@context\": \"http://schema.org\",\r\n        \"@type\": \"BlogPosting\",\r\n        url: canonicalUrl,\r\n        name: post.title,\r\n        headline: post.title,\r\n        image: {\r\n          \"@type\": \"ImageObject\",\r\n          url: imageUrl,\r\n        },\r\n        description: post.description,\r\n        datePublished: post.date,\r\n        dateModified: post.date, // FIXME\r\n        mainEntityOfPage: {\r\n          \"@type\": \"WebPage\",\r\n          \"@id\": canonicalUrl\r\n        },\r\n        author,\r\n        publisher\r\n      }\r\n      // @ts-ignore\r\n      jsonLd = [...jsonLd, article]\r\n    }\r\n    return JSON.stringify(jsonLd)\r\n  }\r\n\r\n  let jsonLd = createJsonLd()\r\n\r\n  return (\r\n    <>\r\n      <html lang=\"ja\" />\r\n      <title>{fullTitle}</title>\r\n      <link rel=\"canonical\" href={canonicalUrl} />\r\n      <script type=\"application/ld+json\">{jsonLd}</script>\r\n\r\n      <meta name=\"description\" content={metaDescription} />\r\n      {imagePath && (\r\n        <>\r\n          <meta property=\"og:image\" content={imageUrl} />\r\n          <meta property=\"og:url\" content={imageUrl} />\r\n          <meta property=\"twitter:image\" content={imageUrl} />\r\n        </>\r\n      )}\r\n      <meta property=\"og:title\" content={fullTitle} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content={`${isRootPath ? \"website\" : \"webpage\"}`} />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={siteMetadata.social.twitter} />\r\n      <meta name=\"twitter:title\" content={fullTitle} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n","import * as React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\nimport { GatsbyImage, getImage, IGatsbyImageData } from \"gatsby-plugin-image\"\r\nimport styled from \"styled-components\"\r\nimport { convertCategory, mergePost } from \"../utilFunction\"\r\nimport RelatedList from \"../components/related-list\"\r\n\r\ntype BlogPostTemplateProps = {\r\n  data: {\r\n    allFile: AllFile\r\n    mdx: MdxPost\r\n    mdPrevious: {\r\n      id: string\r\n      fields: {\r\n        slug: string\r\n      }\r\n      frontmatter: {\r\n        title: string\r\n      }\r\n    }\r\n    mdNext: {\r\n      id: string\r\n      fields: {\r\n        slug: string\r\n      }\r\n      frontmatter: {\r\n        title: string\r\n      }\r\n    }\r\n    wpPost: WpPost\r\n    wpPrevious: {\r\n      id: string\r\n      title: string\r\n      slug: string\r\n    }\r\n    wpNext: {\r\n      id: string\r\n      title: string\r\n      slug: string\r\n    }\r\n  }\r\n  location: Location\r\n  children: React.ReactNode\r\n}\r\n\r\nconst BlogPostTemplate = ({\r\n  data: { allFile, mdx, mdPrevious, mdNext, wpPost, wpPrevious, wpNext },\r\n  location, children\r\n}: BlogPostTemplateProps) => {\r\n  const post = {\r\n    id: mdx?.id || wpPost?.id,\r\n    title: mdx?.frontmatter.title || wpPost?.title,\r\n    body: mdx?.body || wpPost?.content,\r\n    excerpt: mdx?.excerpt || wpPost?.excerpt,\r\n    slug: mdx?.fields.slug || \"/\" + wpPost?.slug,\r\n    date: mdx?.frontmatter.date || wpPost?.date,\r\n    description: mdx?.frontmatter.description,\r\n    altText: wpPost?.featuredImage?.node.altText || \"\",\r\n    gatsbyImage: wpPost?.featuredImage?.node.gatsbyImage || getImage(allFile.edges[0]?.node.childImageSharp),\r\n    category: mdx?.frontmatter.category || wpPost?.categories?.nodes[0]?.name,\r\n    tags: mdx?.frontmatter.tags || wpPost?.tags?.nodes.map(t => t.name),\r\n  }\r\n  const previous = {\r\n    id: mdPrevious?.id || wpPrevious?.id,\r\n    title: mdPrevious?.frontmatter.title || wpPrevious?.title,\r\n    slug: mdPrevious?.fields.slug || \"/\" + wpPrevious?.slug,\r\n  }\r\n  const next = {\r\n    id: mdNext?.id || wpNext?.id,\r\n    title: mdNext?.frontmatter.title || wpNext?.title,\r\n    slug: mdNext?.fields.slug || \"/\" + wpNext?.slug,\r\n  }\r\n\r\n  return (\r\n    <Layout location={location}>\r\n      <Article\r\n        className=\"blog-post\"\r\n        itemScope\r\n        itemType=\"http://schema.org/Article\"\r\n      >\r\n        <header>\r\n          <h1 itemProp=\"headline\">{post.title}</h1>\r\n          <p>\r\n            <div className=\"time\">\r\n              <small>\r\n                <time>{post.date}</time>\r\n              </small>\r\n            </div>\r\n          </p>\r\n        </header>\r\n        <div className=\"featuredImage\">\r\n          <GatsbyImage\r\n            image={post.gatsbyImage}\r\n            alt={post.title}\r\n          />\r\n        </div>\r\n        <Dl>\r\n          <dt>カテゴリ</dt>\r\n          <dd><Link to={`/category/${convertCategory(post.category)}`}>{post.category}</Link></dd>\r\n        </Dl>\r\n        <Dl>\r\n          <dt>タグ</dt>\r\n          {post.tags.map((tag, index) => {\r\n            return <dd key={`tag${index}`}><Link to={`/tag/${tag}/`}>{tag}</Link></dd>\r\n          })}\r\n        </Dl>\r\n\r\n        <BlogEntry>\r\n          {children ||  // MDX or Wordpress content\r\n            <section\r\n              dangerouslySetInnerHTML={{ __html: post.body }}\r\n              itemProp=\"articleBody\"\r\n            />\r\n          }\r\n        </BlogEntry>\r\n        <hr />\r\n        <footer>\r\n        </footer>\r\n      </Article>\r\n      <BlogPostNav className=\"blog-post-nav\">\r\n        <ul\r\n          style={{\r\n            display: `flex`,\r\n            flexWrap: `wrap`,\r\n            justifyContent: `space-between`,\r\n            listStyle: `none`,\r\n            padding: 0\r\n          }}\r\n        >\r\n          <li>\r\n            {previous && (\r\n              <Link to={previous.slug} rel=\"prev\">\r\n                ← {previous.title}\r\n              </Link>\r\n            )}\r\n          </li>\r\n          <li>\r\n            {next && (\r\n              <Link to={next.slug} rel=\"next\">\r\n                {next.title} →\r\n              </Link>\r\n            )}\r\n          </li>\r\n        </ul>\r\n      </BlogPostNav>\r\n\r\n      <RelatedList slug={post.slug} category={post.category} tags={post.tags} />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPostTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPostBySlug(\r\n    $id: String!\r\n    $previousPostId: String\r\n    $nextPostId: String\r\n    $imagePath: String\r\n  ) {\r\n    allFile(\r\n      filter: {\r\n        relativePath: { eq: $imagePath }\r\n        sourceInstanceName: { eq: \"images\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          childImageSharp {\r\n            gatsbyImageData(\r\n              width: 960\r\n              formats: [AUTO, WEBP, AVIF]\r\n              placeholder: BLURRED\r\n            )\r\n          }\r\n        }\r\n      }\r\n    }\r\n    mdx(id: { eq: $id }) {\r\n      id\r\n      excerpt\r\n      body\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n        date(formatString: \"YYYY/MM/DD\")\r\n        description\r\n        category\r\n        tags\r\n      }\r\n      \r\n    }\r\n    mdPrevious: mdx(id: { eq: $previousPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    mdNext: mdx(id: { eq: $nextPostId }) {\r\n      fields {\r\n        slug\r\n      }\r\n      frontmatter {\r\n        title\r\n      }\r\n    }\r\n    wpPost(id: { eq: $id }) {\r\n      id\r\n      title\r\n      content\r\n      excerpt\r\n      slug\r\n      date(formatString: \"YYYY/MM/DD\")\r\n      featuredImage{\r\n        node{\r\n          altText\r\n          gatsbyImage(width: 960)\r\n        }\r\n      }\r\n      categories{\r\n        nodes{\r\n          name\r\n        }\r\n      }\r\n      tags{\r\n        nodes{\r\n          name\r\n        }\r\n      }\r\n    }\r\n    wpPrevious: wpPost(id: { eq: $previousPostId }) {\r\n      title\r\n      slug\r\n    }\r\n    wpNext: wpPost(id: { eq: $nextPostId }) {\r\n      title\r\n      slug\r\n    }\r\n  }\r\n`\r\n\r\nexport const Head = ({\r\n                       data: { allFile, mdx, wpPost },\r\n                       location\r\n                     }: BlogPostTemplateProps) => {\r\n  const post = mergePost(mdx, wpPost, allFile)\r\n  return (\r\n    <Seo\r\n      title={post.title}\r\n      description={post.excerpt}\r\n      location={location}\r\n      imagePath={post.gatsbyImage ? post.gatsbyImage.images.fallback?.src : null}\r\n      post={post}\r\n    />\r\n  )\r\n}\r\n\r\nconst Article = styled.article`\r\n  max-width: 960px;\r\n  margin: 0 auto;\r\n  background-color: #fff;\r\n\r\n  .time {\r\n    text-align: right;\r\n  }\r\n\r\n  .featuredImage {\r\n    text-align: center;\r\n  }\r\n`\r\nconst BlogEntry = styled.div`\r\n  margin: 15px 0 30px;\r\n  border-top: 1px solid #ccc;\r\n  border-bottom: 1px solid #ccc;\r\n`\r\nconst BlogPostNav = styled.nav`\r\n  max-width: 750px;\r\n  margin: 0 auto;\r\n\r\n  ul {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    list-style: none;\r\n  }\r\n`\r\nconst Dl = styled.dl`\r\n  display: flex;\r\n  margin: 0;\r\n\r\n  dt {\r\n    width: 80px;\r\n    font-weight: 700;\r\n  }\r\n\r\n  dd {\r\n    font-size: 14px;\r\n    margin-left: 0;\r\n    padding-left: 0;\r\n\r\n    & + dd {\r\n      margin-left: 15px;\r\n      margin-bottom: 5px;\r\n    }\r\n\r\n    a {\r\n      text-decoration: none;\r\n      border-radius: 3px;\r\n      color: #fff;\r\n      background: var(--orange);\r\n      padding: 2px 5px;\r\n\r\n      &:hover {\r\n        opacity: .5;\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["_ref","slug","category","tags","allMdx","allWpPost","allFile","useStaticQuery","posts","mergePosts","map","post","point","tag","includes","relevance","filter","r","sort","a","b","date","slice","React","ContentsListHeader","ContentsOrderedListWrapper","index","key","Link","to","convertCategory","title","className","gatsbyImage","GatsbyImage","alt","altText","image","dangerouslySetInnerHTML","__html","excerpt","description","location","imagePath","children","siteMetadata","config","isRootPath","pathname","metaDescription","fullTitle","canonicalUrl","siteUrl","replace","imageUrl","jsonLd","author","name","summary","url","sameAs","social","twitter","github","publisher","logo","width","height","inLanguage","article","headline","datePublished","dateModified","mainEntityOfPage","concat","_toConsumableArray","JSON","stringify","createJsonLd","lang","rel","href","type","content","property","_wpPost$featuredImage","_wpPost$featuredImage2","_allFile$edges$","_wpPost$categories","_wpPost$categories$no","_wpPost$tags","data","mdx","mdPrevious","mdNext","wpPost","wpPrevious","wpNext","id","frontmatter","body","fields","featuredImage","node","getImage","edges","childImageSharp","categories","nodes","t","previous","next","Layout","Article","itemScope","itemType","itemProp","Dl","BlogEntry","BlogPostNav","style","display","flexWrap","justifyContent","listStyle","padding","RelatedList","Head","_ref2","_post$gatsbyImage$ima","mergePost","Seo","images","fallback","src","styled","_templateObject","_taggedTemplateLiteralLoose","div","_templateObject2","nav","_templateObject3","dl","_templateObject4"],"sourceRoot":""}